<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PTB从入门到放弃03 --- 按键反应收集]]></title>
    <url>%2F2019%2F07%2F01%2FPTB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8303%20---%20%E6%8C%89%E9%94%AE%E5%8F%8D%E5%BA%94%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[在02里面只提到了按键等待，但是认知行为实验是需要收集被试的按键反应的正确与错误的信息以及反应正确时被试的反应时的。我们需要先收集被试的按键，然后再让程序自己拿这个被试的按键去与已经写好的正确与否判断语句进行匹配，然后反应正确，记录下这个反应时，存到数据变量里。 在进行按键反应收集之前，我们需要做的，就是设置好相应的键码。 1 设置键码KbNameResult = KbName(arg); 该函数是用来设置键盘码的。返回值KbNameResult返回键的扫描码。扫描码采取的貌似是ASCII码。比如KbName(&#39;space&#39;)空格键对应的是32，也就是返回值是32。 参数arg是指定键名，比如回车是return，空格是space，a就是a这样的。 因为电脑系统和设备有可能不同，比如windows和mac os，键盘码就有可能不同，所以在每个程序最开始，建议都统一键盘码。 KbName(&apos;UnifyKeyNames&apos;); %统一键盘码 假如实验需要用到的按键是a和l，那么我们就设置： kba = KbName(&apos;a&apos;); kbl = KbName(&apos;l&apos;); 变量kba和kbl就是得到的a和l键返回的扫描码。 2 限制按键键盘上的按键很多，有时候怕被试不小心按错，而我们的程序刚好也没有对那些按键采取相应的措施，造成数据异常是一回事。如果不小心按到一些关键按键，导致实验程序崩溃那就更惨了。 为了避免这种错误的发生，我们可以对按键范围进行限制。 RestrictKeysForKbCheck()函数就是用来对按键范围进行限制的。 比如我们只要被试对a和l键进行反应，其他按键完全不需要： RestrictKeysForKbCheck([KbName(&apos;a&apos;) KbName(&apos;l&apos;)]); 那么在这之后，除了a和l键之外，程序不会对其他键产生任何反应。 如果有其他特殊按键，比如设置按Esc键退出程序，也可以加上该按键，这个限制范围完全由你决定。 3 按键判断[keyIsDown, secs, keyCode, deltaSecs] = KbCheck([deviceNumber]); 4个返回值。 keyIsDown，如果有任意的按键行为产生，返回1。 secs，跟KbWait()的一样，返回按键产生的时间。 keyCode，返回按键的扫描码。和KbName的返回值一样，比如空格space，返回32。 deltaSecs，跟KbWait()的一样，返回按键产生时间的置信区间。一般用不到。 1个参数。 deviceNumber，指定查询的键盘设备，如果只有一个键盘，默认即可，不需要设置。 while true [~,secs,keyCode]= KbCheck; if any(keyCode) %对于任意的按键 if keyCode(kba) %如果按的是a键 if 判断呈现的刺激是否与反应匹配，如果是 语句块（反应正确，一般记录下反应时） 反应时=secs-刺激呈现时的时间 else 语句块（反应错误时你要做的事） end break; %跳出while循环 elseif keyCode(kbl) %如果按的是l键 if 判断呈现的刺激是否与反应匹配，如果是 语句块（反应正确，一般记录下反应时） 反应时=secs-刺激呈现时的时间 else 语句块（反应错误时你要做的事） end break; %跳出while循环 end end end 这就是一个简单的按键判断过程原理。先判断按键是什么，再判断这个按键行为是否与刺激匹配，如果匹配，就是正确反应时，那么记录下这个反应时，以及其他你所需要的信息，保存好。然后跳出这个循环，进行下一试次。 4 反应时获取GetSecs 这个函数是用来获取当前时间值的。它获取的时间精度据说特别高。一般是毫秒级别，如果电脑系统配置了更高精度的时钟，它能达到微秒级。 在刺激呈现时，使用 t_start = GetSecs; 获取刺激呈现的时间点，然后KbCheck返回的按键时间点secs-t_start就等于被试的反应时间。 restime = secs-t_start; 该句可以加进去上面KbCheck判断里按键与刺激匹配的语句块里，把时间赋值给变量restime。当然我们一般不这么存储数据，在后面我会讲到存储数据的方式。这里只先简单介绍怎么得到反应时。]]></content>
      <tags>
        <tag>psychtoolbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PTB从入门到放弃02 --- 指导语呈现和键盘鼠标按键等待]]></title>
    <url>%2F2019%2F06%2F29%2FPTB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8302%20---%20%E6%8C%87%E5%AF%BC%E8%AF%AD%E5%91%88%E7%8E%B0%E5%92%8C%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E6%8C%89%E9%94%AE%E7%AD%89%E5%BE%85%2F</url>
    <content type="text"><![CDATA[本文介绍指导语呈现的途径以及简单的键盘和鼠标等待 1 指导语呈现实现指导语的呈现一般有2种方式：一种是文字型，一种是图片型。 第一种文字型，缺点很多，主要是比较复杂，需要写比较多的代码，耗时耗力；而且matlab的中文支持貌似也很差，需要经过各种字符转换和编码转换。优点也有，就是能够匹配任一台电脑。当然这个优点其实可有可无。所以我一般不会用这种方式呈现指导语。 第二种图片型，会比较简单。思路就是先把指导语打印在一张图片上，然后在PTB里面使用DrawTexture或者PutImage的方式呈现出来。需要的代码跟文字型比起来，简直少得不能再少。所以关于指导语呈现就学这样的方式就够了，省时省力。 如果你会Photoshop这种类似的图片编辑技能的话，那把文字打印在一张空白图片上对你来说应该轻而易举。如果不会PS，那PPT总会吧？新建空白ppt把指导语打上去，然后另存为图片就可以了，关于图片尺寸也是可以自己在ppt上调整的。如果你跟我说不会把ppt另存为图片，截图总会吧？直接截取ppt上的指导语然后保存成图片。 有了指导语图片后，我们先使用imread（）函数读取这张图片为二进制矩阵。 Image = imread（filename）； filename就是图片文件名。如果你喜欢简单粗暴点的，下一步就可以直接把图片打印到屏幕上了。 Screen(&apos;PutImage&apos;,WindowPtr,Image); ‘PutImage’函数功能就是放置一张图片。 两行代码轻轻松松呈现指导语。但是这也有缺点。首先你的图片尺寸是固定的，比如我的电脑屏幕是宽2736x高1824，我在Photoshop上直接把图片尺寸也设置成这个大小，那么就契合屏幕尺寸了。但是如果我的程序拿到另外一台电脑运行，它的屏幕分辨率没有我的电脑这么大，或者比我的还大，那么指导语就会更小或者更大了，不合适。不过如果只是大一点小一点，其实也没有多大影响。 另一个函数，是可以解决这个问题的，那就是对图片进行缩放，或者其他调整。 InstrImg = Screen(&apos;MakeTexture&apos;,WindowPtr,Image); Screen(&apos;DrawTexture&apos;,Wptr,InstrImg); 比上面也就多了一行。 使用’MakeTexture’先创建纹理缓冲，也就是图片的缓冲，然后再用’DrawTexture’把这个图片缓冲打印出来。呈现效果和’PutImage’其实是一样的，但是’DrawTexture’还多了很多参数可以对图片进行调整。 Screen(&apos;DrawTexture&apos;, windowPointer, texturePointer [,sourceRect] [,destinationRect] [,rotationAngle] [, filterMode] [, globalAlpha] [, modulateColor] [, textureShader] [, specialFlags] [, auxParameters]); texturePointer，就是’MakeTexture’创建纹理缓冲的指针。 sourceRect，指定纹理中的某个区域，默认是整张图片，保持默认即可。 destinationRect，指定屏幕中的某个区域来绘制纹理，默认在屏幕中心。 rotationAngle，指定纹理旋转角度，默认0度，即不旋转。 后面的参数基本用不到（反正我没用过，所以也不太会使用那些参数）。 总而言之’MakeTexture’和’DrawTexture’比’PutImage’的发挥空间要大的多，简单来说就是你可以对图片进行更多的调整。不过其实对于指导语来说，一般’PutImage’就够用了，不用去搞一些花里胡哨的东西。’MakeTexture’和’DrawTexture’一般是用来绘制一些特殊纹理的，比如随机噪音。 imgarray = 255*rand(200,200); %生成200*200的随机数字 imgnoise = Screen(&apos;MakeTexture&apos;,Wptr,imgarray); Screen(&apos;DrawTexture&apos;,Wptr,imgnoise); 输出的结果就是： 有时候我们也经常需要用到光栅。 那么首先了解一下meshgrid(x,y)函数，它是用来生成二维网格矩阵的。如： [a,b] = meshgrid(1:4,1:5)； 结果输出： a = 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 b = 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 a矩阵每一行都是[1,2,3,4]，b矩阵每一列都是[1,2,3,4,5]，a和b都是5行4列。 [x,y] = meshgrid(1:100,1:100); %生成1：100的两个网格矩阵 生成的x和y都是100行100列，而x的每一行都是1：100，y的每一列都是1：100.就像一张网格一样。 然后我们用正弦函数转换一下并输出图片。 imshow(sin(x)) imshow（）函数是显示图片。结果是： 或者： imshow(sin(x+y)) 结果是： 正弦光栅不止于此，任意地去调配x和y的值，你可以玩出花来。 2 按键等待[secs, keyCode, deltaSecs] = KbWait([deviceNumber][, forWhat=0]); 该函数是用来等待被试的按键行为。在被试产生任意按键（或者可以指定按键）后，马上进入下一条代码运行，如果被试未产生按键，就一直停留在上一个代码语句中（类似于暂停或者休息）。 三个返回值。 secs，返回按键行为发生的时间； keyCode，返回按键的扫描码（即让你知道被试按哪个键），需要结合KbName函数使用； deltaSecs，返回反应时的置信区间。secs是时间点，而deltaSecs是一个区间，告诉你被试的按键行为可能在这个时间段内。因为KbCheck会一遍一遍地检索键盘是否有按键发生，所以可能会产生细小的误差，当然这些误差几乎可以忽略不计。我们只需要使用secs所得到的时间就够了。 两个可选参数， deviceNumber，指定键盘设备，有时候外接键盘可能不止一个，就需要使用到这个参数。默认是1个，所以不用管它； forWhat，指定获取的是“按下”的还是“释放”的动作，默认值0，表示“按下”动作，值1为“释放”动作，值2是“释放”后再接收被试按下的动作。一般保持默认即可，或者有特殊需求也只到1。 所需要的参数和返回值视情况而定。一般不需要任何值， KbWait； 还有另外两个相似函数，KbPressWaitb,被试按压等待，相当于KbWait的forwhat参数=0的情况；KbReleaseWait，释放等待，相当于KbWait的forwhat参数=1的情况。一般只需要使用KbWait即可。 3 等待鼠标点击一般的认知行为实验我们都是使用的键盘按键反应，但不排除某些实验有特殊要求，需要用到鼠标反应。 [clicks,x,y,whichButton] = GetClicks([windowPtrOrScreenNumber][, interclickSecs]); 四个返回值， clicks，返回值单击=1，双击=2； x和y，返回鼠标操作时的坐标值； whichButton，返回值表示左键=1，中键=2，右键=3。 两个可选参数， windowPtrOrScreenNumber，屏幕的指针或者编号，即Openwindow所得到的指针和编号。 interclickSecs，指定鼠标双击的时间间隔。如果鼠标两此单击的时间间隔小于该值时，视为双击，否则视为单击行为。如果该值设置为0，那么就是忽略双击，只使用单击；如果使用默认值，则使用系统默认的双击判定时间。 [Clicks] = GetClocks(windowPtr); 一般只需要写这样就可以了。 然后常用的代码块可以是这样： while true [clicks] = GetClicks(windowPtr) if clicks == 1 执行代码块 break; %跳出循环 elseif clicks == 2 执行另一个代码块 break; end end]]></content>
      <tags>
        <tag>psychtoolbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PTB从入门到放弃01 --- psychtoolbox5个基础函数]]></title>
    <url>%2F2019%2F06%2F28%2FPTB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%8301%20---%20psychtoolbox5%E4%B8%AA%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[matlab刺激的呈现主要是依托于PTB的窗口类函数来实现的。类似于ppt，你在空白的ppt页面上绘制纹理，摆放图形，描述文字，PTB为你提供无限多的空白窗口，你可以在这些窗口上做你想做的任何事。 当然到目前为止是静态的，要让它像ppt一样动起来，你还需要使用其他操作类函数来实现，让窗口一个个切换、悬停、与人进行互动、获取外界的反应比如按键和声音、获取反应时，以及把你想要得到的数据，记录下来。 PTB跟E-Prime不同的是，后者的实验程序编写是可视化的，它给你提供各种对象，比如视频、图像、声音、文字等，你直接拖拽它们到空白的模板上，摆好位置。这个过程你是看得到的。但是PTB是半可视化的，你需要先写脚本代码，使用这些代码在空白的窗口上来绘制刺激。如果你不运行这些脚本代码，你是无法看到这些窗口和刺激的。而这很容易会让你的代码产生bug。 这里先介绍5个最基础的函数让你体验PTB。 废话不多说。 1 创建主页面或者我常叫它开屏，就是开启屏幕；如果你的实验有特殊要求，也可以开启多个屏幕。 [windowPtr,rect] = Screen(&apos;OpenWindow&apos;,windowPtrOrScreenNumber[,color] [,rect] [,pixelSize] [,numberOfBuffers] [,stereomode] [,multisample] [,imagingmode] [,specialFlags] [,clientRect]); 我们先介绍一下这些参数： 注意一下，在[ ]里的参数是可选参数不是必须参数，即不是一定要去设置的，可以不用设置保持默认值即可 ①windowPtr，函数的第一个返回值。当你使用这个函数开启屏幕的时候，这个函数会返回此屏幕的句柄，或者叫指针。这个返回值是必需的，因为我们的所有刺激呈现都是基于Screen函数的，所以这个句柄的作用就是一个连接所有的Screen函数。比如说我开启了一个屏幕，并且返回了这个参数，假设它的值是1，也就是说，这个值就是这个屏幕的符号或者说编号，它告诉后面所有的Screen函数，你们都要在这个编号为1的屏幕上工作。 ②rect，函数的第二个返回值。它返回的是一个数组，就是你开启的屏幕的大小，单位是像素。比如我在我的电脑上开启了屏幕，默认全屏开启，那么这个rect返回的就是我的电脑屏幕的尺寸大小，2736x1824，当然它的形式是数组的形式，就是[0，0，2736，1824]这样的。这个返回值并不是必需的。如果你的程序只是想在你的电脑上运行，那么这个参数基本上是不需要的。如果你的程序是想在多个电脑上运行，而且这些电脑的屏幕尺寸大小不一样，那就有必要获取这个参数，后面刺激的呈现要在此基础上进行调整。 为什么这么说？因为每个电脑的屏幕大小不一样，而PTB的绘制类函数都是需要使用坐标来进行绘制。比方说，我的电脑是宽2736x高1824，现在我在中间的位置[1368，912]绘制一个圆，暂且不管这个圆的大小。我们现在把这个程序拿到另一台电脑上运行，假如这个电脑屏幕尺寸是1920x1080，对它来说，它的中间位置是[960，540]，而圆的坐标还是[1368，912]，那么它会出现在哪？肯定不是正中间，而且还会偏离中间很远。 如果我们绘制刺激，不使用具体的坐标值，而使用所获得的屏幕尺寸返回值的比例，就可以很容易解决这样的问题。比如我们在绘制圆的时候，使用的坐标是[rect（3）x0.5，rect（4）x0.5]，也就是在宽和高各取一半的这个坐标位置进行绘制，那么不管你在哪台电脑上运行，不管你屏幕大小，这个圆的位置会始终在中间出现（原理是这个原理，但绘制圆的时候不会这么简单，因为绘制圆会涉及到多个参数）。当然最简单的是可以直接使用‘centre’这样的坐标来直接在中央绘制。 ③windowPtrOrScreenNumber，这个参数是屏幕的序号，一般默认为0，意思是直接覆盖显示器的屏幕，如果是1，就是指向第1个显示器屏幕，如果是2就是指向第2个显示器屏幕。此参数为必须填写参数。默认0即可。 ④color，指定屏幕的颜色，默认白色，可以是0~255的任一个值，0表示黑色，255表示白色；也可以是[R,G,B]形式的值，比如[255，0，0]表示红色，[0，255，0]表示绿色。根据实验要求进行相应设置即可。 ⑤rect，指定创建的屏幕大小。这个参数跟前面的rect返回值是一样的，只不过前面的是返回值，而这里的是输入值，是需要你来设置的。一般无需设置，保持默认就行，默认是全屏开启。如果有特殊要求，也可以进行设置。比如我只要一个宽高都是1000像素的正方形屏幕，那么可以设置数值[0，0，1000，1000]，这个数组也可以说是屏幕的坐标。它的形式是[x1，y1，x2，y2]，表示屏幕从x1和y1这个坐标点开始绘制，对角点是x2和y2，也就是固定两个对角点绘制开启屏幕，屏幕的宽高就是x2-x1和y2-y1。[0，0，1000，1000]的意思就是从左上角画1000像素宽高的正方形。[0，0]表示左上角的点，在PTB里，屏幕的坐标原点[0，0]就是左上角， ⑤pixelSize，指定屏幕像素深度，用位数来表示存储一个像素需要的位数，默认值是电脑屏幕的设置，可取值8，16，32，等，值越大，表示某个像素的颜色值越丰富。这个参数不需要去设置，基本用不到。除非你的实验对屏幕的颜色需要进行校正之类的。 ⑥numberOfBuffers，指定缓冲区数。一般不需要设置，默认就行。这个涉及到PTB主页面和缓冲页面的原理。用不到。PTB的主要分为主页面和缓冲页面，一个屏幕绘制好后呈现出来，就是主页面，而下一个屏幕也是绘制好了，存放在缓冲页面里，等待屏幕切换，主页面消失，缓冲页面就马上呈现出来，成为主页面。这样就不需要调用的时候再绘制，可以增加反应时间的精确性等。 ⑥stereomode，指定是否开启立体模式，默认不开启，据说是要使用到某些立体设备之类的，基本用不到这个，我也没使用过，不懂，跳过。 ⑦multisample，指定反锯齿优化，基本用不到，跳过。 ⑧imagingmode，指定图像处理模式，用来控制PTB调用OpenGL这类插件来实现复杂的图像处理，我没用到过，不是很懂，基本上也用不到，跳过。 ⑨specialFlags，基本用不到，我也不知道怎么用。 ⑩clientRect，指定绘制区域大小，对绘制内容进行缩放处理，也基本用不到。 能用得到基本就是前几个参数。我们的第一条代码： [windowPtr,rect] = Screen(&apos;OpenWindow&apos;,0); %表示开启屏幕，只设置第一个参数，后面全都默认就行 如果对屏幕颜色有要求，就： [windowPtr,rect] = Screen(&apos;OpenWindow&apos;,0,[250,0,0]); %开启红色屏幕 如果对屏幕大小有要求，就： [windowPtr,rect] = Screen(&apos;OpenWindow&apos;,0,[250,0,0],[0,0,1200,1200]); %开启1200像素的正方形红色窗口 2 切换页面[VBLTimestamp, StimulusOnsetTime, FlipTimestamp,Missed, Beampos] = Screen(&apos;Flip&apos;, windowPtr [, when] [, dontclear] [, dontsync] [, multiflip]); ①VBLTimestamp，返回值，记录页面切换开始时刻的时间。 ②StimulusOnsetTime，返回值，记录刺激呈现时刻的时间。 ③FlipTimestamp，返回值，记录页面切换结束时刻的时间，FlipTimestamp-VBLTimestamp=一次页面切换的时间。 ④Missed，返回值，是否发生帧丢失，&gt;0表示丢失，&lt;0表示未丢失。 ⑤Beampos，返回值，不是很懂这是干嘛的，没用过。 ⑥windowPtr，屏幕句柄参数，不懂的回上面OpenWindow去看。 ⑦when，指定页面切换时间，默认值是0，即马上切换，如果设置值&gt;0，表示在这个设置时间后，再进行页面切换。 ⑧dontclear，指定是否清除帧缓冲，默认值0，表示页面切换后马上清除，1表示不清除，但是会向缓冲区继续绘制新的内容。意思是比如你呈现了一个矩形，下一个页面你要呈现一个圆形，在页面切换的时候如果你不清除这个页面的缓冲，就不会在空白页面上绘制圆形，而是在本来就有一个矩形的页面上继续绘制一个圆形，后面呈现出来的就是一个带有圆形和矩形的界面。 ⑨multiflip，指定是否切换所有主页面，默认值是0，只切换一个显示器的主页面，如果&gt;0，就是切换所有显示器的页面。一般用不到。 一般使用的代码是： Screen(&apos;Flip&apos;,windowPtr); %马上切换页面 其他参数不需要管，如果你需要切换的时间这类的返回值，在前面自己加上即可。 3 关闭屏幕Screen(&apos;Close&apos;, windowPtr); 或者，关闭所有屏幕： Screen(&apos;CloseAll&apos;); sca； 4 等待时间[realWakeupTimeSecs] = WaitSecs(waitPeriodSecs); [realWakeupTimeSecs] = WaitSecs(&apos;UntilTime&apos;, whenSecs); [realWakeupTimeSecs] = WaitSecs(&apos;YieldSecs&apos;, waitPeriodSecs); ①realWakeupTimeSecs，返回值，返回等待结束时的系统时间。 ②waitPeriodSecs，指定等待时间，单位是秒，如1就是1秒，0.5就是500毫秒。理想情况下可以精确到1毫秒。 ③whenSecs，指定直到什么时间结束等待。 一般使用第一个形式，返回值是否需要视情况而定，一般不需要，代码可以直接写： WaitSecs(1); %等待1秒。 输出文本[newX, newY]=Screen(&apos;DrawText&apos;, windowPtr, text [,x] [,y] [,color] [,backgroundColor] [,yPositionIsBaseline] [,swapTextDirection]); ①newX, newY，两个返回值，是一个坐标，返回得到文本绘制后，画笔所在的坐标位置。基本不需要 ②windowPtr，屏幕句柄，不多说。 ③text，文本内容，需要用英文输入法下的单引号包括。如果内容是中文，需要使用double（）函数转换。 ④x，y，指定文本绘制的起始坐标，默认从原点[0，0]开始。 ⑤color，指定文本颜色，默认黑色，可以是0~255，也可以是[R,G,B]。 ⑥backgroundColor，指定文本的背景颜色，默认透明（即没有背景色）。一般不需要，如果需要，可以结合textBackgroundColor函数使用。 ⑦yPositionIsBaseline，指定是否把坐标y当作文本基线，默认0，不需要。 ⑧swapTextDirection，指定文本输出方向，默认0，即从左到右，如果1则从右到左。（如需要水平和垂直输出可以使用另一个函数DrawFormattedText）。 一般使用代码为： Screen(&apos;DrawText&apos;,windowPtr,&apos;text&apos;,rect(3)/2,rect(4)/2); %在以屏幕中点为起始点输出文本内容 了解这5个函数之后，我们就可以开始初步体验PTB了： [windowPtr,rect] = Screen(&apos;OpenWindow&apos;,0); %开启屏幕 Screen(&apos;DrawText&apos;,windowPtr,&apos;Hello World&apos;,rect(3)/2,rect(4)/2); %在中央坐标绘制&apos;Hello World&apos;文本 Screen(&apos;Flip&apos;,windowPtr); %页面切换 WaitSecs(2); %等待2秒 Screen(&apos;CloseAll&apos;); %关闭所有屏幕 复制这5行代码到matlab的m文件，运行一下试试。]]></content>
      <tags>
        <tag>psychtoolbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所谓梦想]]></title>
    <url>%2F2018%2F04%2F10%2F%E6%89%80%E8%B0%93%E6%A2%A6%E6%83%B3%2F</url>
    <content type="text"><![CDATA[迷茫的时候，总会想要去干一些异想天开的事。比如最近多看了几本应当被划分进文学著作类型的书，就想着作家真的是好生厉害，要不我去跨考个中文系，悄咪咪地混进文学的大门算了。 人总是有梦想的，反正当个作家，是我众多梦想之一。惭愧地是，回过头来看，我竟未为这个梦想付出过半点实际努力！这算是幻想了，我应该是期待着哪天突然灵感喷发，莎士比亚狄更斯夏目漱石上身，写出一部旷世巨著，流传千古，成为中国文坛一颗冉冉升起的超新星，身后光芒万丈。 意淫一下又不犯法。 不过话说回来，为了实现这个梦想，我倒也是做过一些事的，只不过都被扼杀在萌芽之中。让我们把时间线拉回到四年前。恰逢高考填志愿，我毅然决然地把汉语言文学放在了历史学之后。造化弄人，分数不够以至第一批志愿落榜，这才有了之后我在师大心理学院读了四年心理学的故事。如果真的存在平行世界，也许会有一个我被某个学校汉语言专业录取，一步步走上作家这条道路的世界吧。 汉语言专业的朋友告诉我，大多数汉语言专业毕业的学生都成为了一名教语文的光荣的人民教师，作家什么的，就别想了吧，那是少数人才能去触碰的东西。 不友好，又十分辛酸。心理学也是如此，大多数的本科毕业生都从事心理健康教育，成为一名心理老师。至于心理咨询师、心理治疗师，那真的是极少数人才有资格去摘得的桂冠。 我曾经想写一个故事： 热血且正义的勇士手握宝剑一路披荆斩棘，终于在极恶之地与大魔王相遇。二话不说勇士提剑朝大魔王砍去，大魔王徒手折断勇士的宝剑，然后一掌拍死了勇士。勇士直到闭上眼睛也想不通，为什么正义打不过邪恶。但其实，正义已经战胜了邪恶。大魔王才是真正的主角，故事的正义，他千难万险才在极恶之地等到了所谓“勇士”，一掌将他毙命。 一反常理的故事，我觉得框架已经很不错，但迟迟没敢动手。我怕一动手，就毁掉了我构建的奇幻世界。想了一个故事，跟写了一个故事，是全然不同的两件事。谁都可以想，但不是谁都能进行创作的。想的时候天花乱坠，等到想要下笔时，却苍白无力。 我觉得我的脑洞还算大，灵感也不少，但也就只停留在想象的阶段。就像，上帝已经把世界的框架都搭好了，准备开始大创世的时候，发现自己半点神力也没有，什么也造不出来，那真是件极其尴尬的事。 但即使一点神力都没有，人也能够在想象世界自我满足，这个方法就是做梦。每次闭上眼睛，就是一次新的冒险。假如你足够厉害，甚至可以连续几天上演连续的剧情。有一段时间我沉迷武侠小说，于是连续几个夜晚，大脑都在梦中编造了我自己想象的武侠世界，任我闯荡。 故事创作这件事，其实在很久以前我就做过。这样的事更加久远了，它大约发生在我的中二时期，差不多就在小六的时候吧。那时并没有太多的学业和升学压力，看了很多漫画故事，脑子里全是一些中二的事。苦于年纪太小，文字表述有限，跟同学开始画火柴人，以火柴人为载体，创作各种各样的冒险故事。 只记得我们在一些空白的作业本上涂涂画画，先把格子一格一格地划好，然后在格子里面画火柴人和各种东西。因为没有美术功底，画的也很简单。但故事内容可一点也不简单。我敢保证，那时候绞尽脑汁，把我们能想到的故事，少年期待的冒险和中二的设定，全都以火柴人为载体表达出来了。 等到把一本厚厚的作业本画得满满的，成为一本精彩的火柴人大冒险故事，全班同学互相传阅，无不惊奇，那时候好不风光，可以说是少年时最得意的杰作。 再后来，由于住在学校，一众同学几乎天天腻在一起，一起吃饭一起玩，还住同一个寝室。我创作之兴大起，其时恰好读完水浒传，于是提笔开始写《校园水浒传》，故事皆取材于校园日常生活。 写了几篇，就被同学们传阅，便获惊叹无数，都要求我继续写下去，只觉自己是个连载小说的作者。后来应该是某位同学在上课的时候拿着我的唯一草稿在看，被班主任发现了，班主任收上去细看之后，应该是觉得这种创作能力要多加鼓励弘扬，有利于提升同学们的兴趣，有利于他的语文教学，便在课上夸赞起来。 甚至，把我的作品印在了当时的一本校园刊物上，供全校学生阅读。那本刊物叫《海螺声声》来着，只记得一般是用来印发一些优秀作文的。据说这个刊物的名字还是我们班主任取得，寓意学生们的作文、作品就像是散落在沙滩上的贝壳，无比珍贵。另一种更合理的解释是同学们的作品就像有些放在耳边有音乐的奇特贝壳。反正我是记不清了。 作品被“出版”了，除了特别开心外，还有些尴尬，感觉就好像是那种本来只属于自己的世界，突然被曝光，被所有人窥探，失去了原本的神奇和秘密。 从那一期之后，我再写了几篇，便没有再写下去了，不知是何原因。或许是感受到了侵犯？或许是灵感枯竭？或许是小学快要毕业？反正就是没有下文了。后来我才知道，人们对这种行为戏称“太监”。之后在追连载的网路小说时，我也深深体会到“太监”之恶毒。 再往前一点，小四还是小五的时候，写的一篇作文被当做优秀作文，在课堂上朗读，又是一件尴尬无比的事。对于一些尴尬的事，我记得还蛮清楚的。那次的渊源是在书店买了两本书，一本《死魂灵》，一本《茶花女》。我实在不知道为什么会头脑发热去拿这两本书。《死魂灵》比较薄，但是因为是俄国文学，译本也不怎么样，看得我两眼发懵；《茶花女》就比较有趣了，虽然厚了点，但是这种爱情故事读来最是轻松有趣。花了几天连夜看完了《茶花女》，当时被感动得眼泪直掉，正好当时是期中考吧，写作文的时候，写了篇读后感，名字就叫《读&lt;茶花女&gt;有感》，把这凄美的爱情故事如何感动我写得有模有样的，也许是老师也被我的真情实感所打动，然后就一举拿下了优秀作文。 当时我甚至有想要改写《茶花女》结局的想法，因为这种sad ending实在让我难受。至于为什么只有想法，没有实际行动，我也记不清了，也许是因为能力有限吧。《茶花女》和《死魂灵》现在还藏在我那一堆书中，提醒着我这些陈年旧事。 我觉得创作真的是件很牛比的事。每个作者都是一个全能的上帝，随意操控着、摆布着一个个书中世界的人物生离死别，悲欢离合。但没有灵感，没有脑洞，没有文笔，还没有阅历和经历，真的是半点也无法写出来的。]]></content>
      <tags>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
</search>
